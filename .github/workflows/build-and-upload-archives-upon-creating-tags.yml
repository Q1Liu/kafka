# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License

name: Release build on tags

# Run this workflow every time a tag is created/pushed
on:
  push:
    tags:
      - '*'

jobs:
  code-analysis:
    # Name the Job
    name: Code analysis
    # Set the type of machine to run on
    runs-on: ubuntu-latest
    steps:
      # Checks out a copy of your repository on the ubuntu-latest machine
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          # bring in all history because the gradle versions plugin needs to "walk back" to the closest ancestor tag
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Run code analysis tasks
        run: ./gradlew rat checkstyleMain checkstyleTest spotbugsMain spotbugsTest --no-daemon -PxmlSpotBugsReport=true -PtestLoggingEvents=started,passed,skipped,failed

  unit-test:
    # Name the Job
    name: ${{ matrix.module }}:unitTest_${{ matrix.scalaVersion }}
    # Set the type of machine to run on
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # We still want to see all jobs' build result to the end
      matrix:
        scalaVersion:
          - 2.12
        module: # Maintain lexicographical order
          - clients
          - core
          - generator
          - metadata
          - raft
          - server-common
          - shell
          - storage
          - storage:api
    steps:
      # Checks out a copy of your repository on the ubuntu-latest machine
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          # bring in all history because the gradle versions plugin needs to "walk back" to the closest ancestor tag
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Run tests
        env:
          SCALA_VERSION: ${{ matrix.scalaVersion }}
          MODULE: ${{ matrix.module }}
        run: ./gradlew -PscalaVersion="$SCALA_VERSION" -PmaxTestRetries=3 cleanTest "$MODULE:unitTest" --no-daemon -PtestLoggingEvents=started,passed,skipped,failed

  int-test-non-core:
    # Name the Job
    name: ${{ matrix.module }}:integrationTest_${{ matrix.scalaVersion }}

    # Set the type of machine to run on
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # We still want to see all jobs' build result to the end
      matrix:
        scalaVersion:
          - 2.12
        module: # Maintain lexicographical order
          - clients
          - generator
          - metadata
          - raft
          - server-common
          - shell
          - storage
          - storage:api
    steps:
      # Checks out a copy of your repository on the ubuntu-latest machine
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          # bring in all history because the gradle versions plugin needs to "walk back" to the closest ancestor tag
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Run tests
        env:
          SCALA_VERSION: ${{ matrix.scalaVersion }}
          MODULE: ${{ matrix.module }}
        run: ./gradlew -PmaxTestRetries=3 -PscalaVersion="$SCALA_VERSION" cleanTest "$MODULE:integrationTest" --no-daemon -PtestLoggingEvents=started,passed,skipped,failed

  int-test-core:
    # Name the Job
    name: core:integrationTest_${{ matrix.scalaVersion }} (${{ matrix.prefix }})
    # Set the type of machine to run on
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # We still want to see all jobs' build result to the end
      matrix:
        scalaVersion:
          - 2.12
        prefix:
          - A B C
          - D E F
          - G H I J K
          - L M N O
          - P Q
          - R S
          - T U V W X Y Z
    steps:
      # Checks out a copy of your repository on the ubuntu-latest machine
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          # bring in all history because the gradle versions plugin needs to "walk back" to the closest ancestor tag
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Run tests
        env:
          SCALA_VERSION: ${{ matrix.scalaVersion }}
          PREFIX: ${{ matrix.prefix }}
        # Use set -f to disable shell expansion on *
        run: >
          set -f
          && ./gradlew -PmaxTestRetries=3 -PscalaVersion="$SCALA_VERSION" -PtestLoggingEvents=started,passed,skipped,failed --no-daemon cleanTest core:integrationTest `for i in $PREFIX; do printf ' --tests %s*' $i; done`
          && set +f

  publish:
    # Name the Job
    name: Build tagged commit and upload the artifacts
    # Set the type of machine to run on
    runs-on: ubuntu-latest
    needs:
      - code-analysis
      - unit-test
      - int-test-non-core
      - int-test-core
    steps:
      # Checks out a copy of your repository on the ubuntu-latest machine
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          # bring in all history because the gradle versions plugin needs to "walk back" to the closest ancestor tag
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Set up release version env variable
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Print the release version
        run: |
          echo "Release version (tag name): ${{ env.RELEASE_VERSION }}"
      - name: Build and publish
        env:
          JFROG_USERNAME: ${{ secrets.JFROG_USERNAME }}
          JFROG_API_KEY: ${{ secrets.JFROG_API_KEY }}
        # Maintain lexicographical order for subprojects
        run: |
          ./gradlew -Pversion=${{ env.RELEASE_VERSION }} :clients:publish :core:publish :metadata:publish :raft:publish :server-common:publish :storage:publish :storage:api:publish --no-daemon
